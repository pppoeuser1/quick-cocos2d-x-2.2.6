
typedef std::function<void(int trackIndex)> StartListener;
typedef std::function<void(int trackIndex)> EndListener;
typedef std::function<void(int trackIndex, int loopCount)> CompleteListener;
typedef std::function<void(int trackIndex, spEvent* event)> EventListener;

class SkeletonAnimation: public SkeletonRenderer {
public:
	static SkeletonAnimation* createWithData (spSkeletonData* skeletonData);
	static SkeletonAnimation* createWithFile (const char* skeletonDataFile, spAtlas* atlas, float scale = 0);
	static SkeletonAnimation* createWithFile (const char* skeletonDataFile, const char* atlasFile, float scale = 0);


	void setAnimationStateData (spAnimationStateData* stateData);
	void setMix (const char* fromAnimation, const char* toAnimation, float duration);

	spTrackEntry* setAnimation (int trackIndex, const char* name, bool loop);
	spTrackEntry* addAnimation (int trackIndex, const char* name, bool loop, float delay = 0);
	spTrackEntry* getCurrent (int trackIndex = 0);
	void clearTracks ();
	void clearTrack (int trackIndex = 0);

	void setStartListener (spTrackEntry* entry, StartListener listener);
	void setEndListener (spTrackEntry* entry, EndListener listener);
	void setCompleteListener (spTrackEntry* entry, CompleteListener listener);
	void setEventListener (spTrackEntry* entry, EventListener listener);

	 void onAnimationStateEvent (int trackIndex, spEventType type, spEvent* event, int loopCount);
	 void onTrackEntryEvent (int trackIndex, spEventType type, spEvent* event, int loopCount);
};
